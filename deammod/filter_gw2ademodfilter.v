// -------------------------------------------------------------
//
// Module: filter_gw2ademodfilter
// Generated by MATLAB(R) 9.7 and Filter Design HDL Coder 3.1.6.
// Generated on: 2021-11-09 20:23:09
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: E:\AM_PROJECT\gw2ademod\gw2aDEMOD\filter
// Name: filter_gw2ademodfilter
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 6
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s12,11 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s28,26 -> [-2 2)  (auto determined)
//   Product         : s27,26 -> [-1 1)  (auto determined)
//   Accumulator     : s28,26 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter_gw2ademodfilter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [11:0] filter_in; //sfix12_En11
  output  signed [27:0] filter_out; //sfix28_En26

////////////////////////////////////////////////////////////////
//Module Architecture: filter_gw2ademodfilter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000001100101010; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b1110111111101101; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b0100110100010011; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b0100110100010011; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b1110111111101101; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000001100101010; //sfix16_En15

  // Signals
  reg  signed [11:0] delay_pipeline [0:5] ; // sfix12_En11
  wire signed [26:0] product6; // sfix27_En26
  wire signed [27:0] mul_temp; // sfix28_En26
  wire signed [26:0] product5; // sfix27_En26
  wire signed [27:0] mul_temp_1; // sfix28_En26
  wire signed [26:0] product4; // sfix27_En26
  wire signed [27:0] mul_temp_2; // sfix28_En26
  wire signed [26:0] product3; // sfix27_En26
  wire signed [27:0] mul_temp_3; // sfix28_En26
  wire signed [26:0] product2; // sfix27_En26
  wire signed [27:0] mul_temp_4; // sfix28_En26
  wire signed [27:0] product1_cast; // sfix28_En26
  wire signed [26:0] product1; // sfix27_En26
  wire signed [27:0] mul_temp_5; // sfix28_En26
  wire signed [27:0] sum1; // sfix28_En26
  wire signed [27:0] add_signext; // sfix28_En26
  wire signed [27:0] add_signext_1; // sfix28_En26
  wire signed [28:0] add_temp; // sfix29_En26
  wire signed [27:0] sum2; // sfix28_En26
  wire signed [27:0] add_signext_2; // sfix28_En26
  wire signed [27:0] add_signext_3; // sfix28_En26
  wire signed [28:0] add_temp_1; // sfix29_En26
  wire signed [27:0] sum3; // sfix28_En26
  wire signed [27:0] add_signext_4; // sfix28_En26
  wire signed [27:0] add_signext_5; // sfix28_En26
  wire signed [28:0] add_temp_2; // sfix29_En26
  wire signed [27:0] sum4; // sfix28_En26
  wire signed [27:0] add_signext_6; // sfix28_En26
  wire signed [27:0] add_signext_7; // sfix28_En26
  wire signed [28:0] add_temp_3; // sfix29_En26
  wire signed [27:0] sum5; // sfix28_En26
  wire signed [27:0] add_signext_8; // sfix28_En26
  wire signed [27:0] add_signext_9; // sfix28_En26
  wire signed [28:0] add_temp_4; // sfix29_En26
  reg  signed [27:0] output_register; // sfix28_En26

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[5] * coeff6;
  assign product6 = mul_temp[26:0];

  assign mul_temp_1 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_1[26:0];

  assign mul_temp_2 = delay_pipeline[3] * coeff4;
  assign product4 = mul_temp_2[26:0];

  assign mul_temp_3 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_3[26:0];

  assign mul_temp_4 = delay_pipeline[1] * coeff2;
  assign product2 = mul_temp_4[26:0];

  assign product1_cast = $signed({{1{product1[26]}}, product1});

  assign mul_temp_5 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_5[26:0];

  assign add_signext = product1_cast;
  assign add_signext_1 = $signed({{1{product2[26]}}, product2});
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[27:0];

  assign add_signext_2 = sum1;
  assign add_signext_3 = $signed({{1{product3[26]}}, product3});
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[27:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = $signed({{1{product4[26]}}, product4});
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[27:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = $signed({{1{product5[26]}}, product5});
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[27:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = $signed({{1{product6[26]}}, product6});
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[27:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum5;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter_gw2ademodfilter
