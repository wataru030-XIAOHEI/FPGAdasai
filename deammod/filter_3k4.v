// -------------------------------------------------------------
//
// Module: filter_3k4
// Generated by MATLAB(R) 9.7 and Filter Design HDL Coder 3.1.6.
// Generated on: 2021-11-14 23:47:53
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: E:\AM_PROJECT\gw2ademod\gw2aDEMOD\filter
// Name: filter_3k4
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 31
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,19 -> [-6.250000e-02 6.250000e-02)
// Input             : s12,11 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s32,30 -> [-2 2)  (auto determined)
//   Product         : s27,30 -> [-6.250000e-02 6.250000e-02)  (auto determined)
//   Accumulator     : s32,30 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter_3k4
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [11:0] filter_in; //sfix12_En11
  output  signed [31:0] filter_out; //sfix32_En30

////////////////////////////////////////////////////////////////
//Module Architecture: filter_3k4
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000100111101100; //sfix16_En19
  parameter signed [15:0] coeff2 = 16'b0000101100110001; //sfix16_En19
  parameter signed [15:0] coeff3 = 16'b0000111011101010; //sfix16_En19
  parameter signed [15:0] coeff4 = 16'b0001010011110010; //sfix16_En19
  parameter signed [15:0] coeff5 = 16'b0001110100000110; //sfix16_En19
  parameter signed [15:0] coeff6 = 16'b0010011011010000; //sfix16_En19
  parameter signed [15:0] coeff7 = 16'b0011000111100010; //sfix16_En19
  parameter signed [15:0] coeff8 = 16'b0011110111000001; //sfix16_En19
  parameter signed [15:0] coeff9 = 16'b0100100111101010; //sfix16_En19
  parameter signed [15:0] coeff10 = 16'b0101010111010010; //sfix16_En19
  parameter signed [15:0] coeff11 = 16'b0110000011110100; //sfix16_En19
  parameter signed [15:0] coeff12 = 16'b0110101011010011; //sfix16_En19
  parameter signed [15:0] coeff13 = 16'b0111001011111110; //sfix16_En19
  parameter signed [15:0] coeff14 = 16'b0111100100011010; //sfix16_En19
  parameter signed [15:0] coeff15 = 16'b0111110011100000; //sfix16_En19
  parameter signed [15:0] coeff16 = 16'b0111111000100111; //sfix16_En19
  parameter signed [15:0] coeff17 = 16'b0111110011100000; //sfix16_En19
  parameter signed [15:0] coeff18 = 16'b0111100100011010; //sfix16_En19
  parameter signed [15:0] coeff19 = 16'b0111001011111110; //sfix16_En19
  parameter signed [15:0] coeff20 = 16'b0110101011010011; //sfix16_En19
  parameter signed [15:0] coeff21 = 16'b0110000011110100; //sfix16_En19
  parameter signed [15:0] coeff22 = 16'b0101010111010010; //sfix16_En19
  parameter signed [15:0] coeff23 = 16'b0100100111101010; //sfix16_En19
  parameter signed [15:0] coeff24 = 16'b0011110111000001; //sfix16_En19
  parameter signed [15:0] coeff25 = 16'b0011000111100010; //sfix16_En19
  parameter signed [15:0] coeff26 = 16'b0010011011010000; //sfix16_En19
  parameter signed [15:0] coeff27 = 16'b0001110100000110; //sfix16_En19
  parameter signed [15:0] coeff28 = 16'b0001010011110010; //sfix16_En19
  parameter signed [15:0] coeff29 = 16'b0000111011101010; //sfix16_En19
  parameter signed [15:0] coeff30 = 16'b0000101100110001; //sfix16_En19
  parameter signed [15:0] coeff31 = 16'b0000100111101100; //sfix16_En19

  // Signals
  reg  signed [11:0] delay_pipeline [0:30] ; // sfix12_En11
  wire signed [26:0] product31; // sfix27_En30
  wire signed [27:0] mul_temp; // sfix28_En30
  wire signed [26:0] product30; // sfix27_En30
  wire signed [27:0] mul_temp_1; // sfix28_En30
  wire signed [26:0] product29; // sfix27_En30
  wire signed [27:0] mul_temp_2; // sfix28_En30
  wire signed [26:0] product28; // sfix27_En30
  wire signed [27:0] mul_temp_3; // sfix28_En30
  wire signed [26:0] product27; // sfix27_En30
  wire signed [27:0] mul_temp_4; // sfix28_En30
  wire signed [26:0] product26; // sfix27_En30
  wire signed [27:0] mul_temp_5; // sfix28_En30
  wire signed [26:0] product25; // sfix27_En30
  wire signed [27:0] mul_temp_6; // sfix28_En30
  wire signed [26:0] product24; // sfix27_En30
  wire signed [27:0] mul_temp_7; // sfix28_En30
  wire signed [26:0] product23; // sfix27_En30
  wire signed [27:0] mul_temp_8; // sfix28_En30
  wire signed [26:0] product22; // sfix27_En30
  wire signed [27:0] mul_temp_9; // sfix28_En30
  wire signed [26:0] product21; // sfix27_En30
  wire signed [27:0] mul_temp_10; // sfix28_En30
  wire signed [26:0] product20; // sfix27_En30
  wire signed [27:0] mul_temp_11; // sfix28_En30
  wire signed [26:0] product19; // sfix27_En30
  wire signed [27:0] mul_temp_12; // sfix28_En30
  wire signed [26:0] product18; // sfix27_En30
  wire signed [27:0] mul_temp_13; // sfix28_En30
  wire signed [26:0] product17; // sfix27_En30
  wire signed [27:0] mul_temp_14; // sfix28_En30
  wire signed [26:0] product16; // sfix27_En30
  wire signed [27:0] mul_temp_15; // sfix28_En30
  wire signed [26:0] product15; // sfix27_En30
  wire signed [27:0] mul_temp_16; // sfix28_En30
  wire signed [26:0] product14; // sfix27_En30
  wire signed [27:0] mul_temp_17; // sfix28_En30
  wire signed [26:0] product13; // sfix27_En30
  wire signed [27:0] mul_temp_18; // sfix28_En30
  wire signed [26:0] product12; // sfix27_En30
  wire signed [27:0] mul_temp_19; // sfix28_En30
  wire signed [26:0] product11; // sfix27_En30
  wire signed [27:0] mul_temp_20; // sfix28_En30
  wire signed [26:0] product10; // sfix27_En30
  wire signed [27:0] mul_temp_21; // sfix28_En30
  wire signed [26:0] product9; // sfix27_En30
  wire signed [27:0] mul_temp_22; // sfix28_En30
  wire signed [26:0] product8; // sfix27_En30
  wire signed [27:0] mul_temp_23; // sfix28_En30
  wire signed [26:0] product7; // sfix27_En30
  wire signed [27:0] mul_temp_24; // sfix28_En30
  wire signed [26:0] product6; // sfix27_En30
  wire signed [27:0] mul_temp_25; // sfix28_En30
  wire signed [26:0] product5; // sfix27_En30
  wire signed [27:0] mul_temp_26; // sfix28_En30
  wire signed [26:0] product4; // sfix27_En30
  wire signed [27:0] mul_temp_27; // sfix28_En30
  wire signed [26:0] product3; // sfix27_En30
  wire signed [27:0] mul_temp_28; // sfix28_En30
  wire signed [26:0] product2; // sfix27_En30
  wire signed [27:0] mul_temp_29; // sfix28_En30
  wire signed [31:0] product1_cast; // sfix32_En30
  wire signed [26:0] product1; // sfix27_En30
  wire signed [27:0] mul_temp_30; // sfix28_En30
  wire signed [31:0] sum1; // sfix32_En30
  wire signed [31:0] add_signext; // sfix32_En30
  wire signed [31:0] add_signext_1; // sfix32_En30
  wire signed [32:0] add_temp; // sfix33_En30
  wire signed [31:0] sum2; // sfix32_En30
  wire signed [31:0] add_signext_2; // sfix32_En30
  wire signed [31:0] add_signext_3; // sfix32_En30
  wire signed [32:0] add_temp_1; // sfix33_En30
  wire signed [31:0] sum3; // sfix32_En30
  wire signed [31:0] add_signext_4; // sfix32_En30
  wire signed [31:0] add_signext_5; // sfix32_En30
  wire signed [32:0] add_temp_2; // sfix33_En30
  wire signed [31:0] sum4; // sfix32_En30
  wire signed [31:0] add_signext_6; // sfix32_En30
  wire signed [31:0] add_signext_7; // sfix32_En30
  wire signed [32:0] add_temp_3; // sfix33_En30
  wire signed [31:0] sum5; // sfix32_En30
  wire signed [31:0] add_signext_8; // sfix32_En30
  wire signed [31:0] add_signext_9; // sfix32_En30
  wire signed [32:0] add_temp_4; // sfix33_En30
  wire signed [31:0] sum6; // sfix32_En30
  wire signed [31:0] add_signext_10; // sfix32_En30
  wire signed [31:0] add_signext_11; // sfix32_En30
  wire signed [32:0] add_temp_5; // sfix33_En30
  wire signed [31:0] sum7; // sfix32_En30
  wire signed [31:0] add_signext_12; // sfix32_En30
  wire signed [31:0] add_signext_13; // sfix32_En30
  wire signed [32:0] add_temp_6; // sfix33_En30
  wire signed [31:0] sum8; // sfix32_En30
  wire signed [31:0] add_signext_14; // sfix32_En30
  wire signed [31:0] add_signext_15; // sfix32_En30
  wire signed [32:0] add_temp_7; // sfix33_En30
  wire signed [31:0] sum9; // sfix32_En30
  wire signed [31:0] add_signext_16; // sfix32_En30
  wire signed [31:0] add_signext_17; // sfix32_En30
  wire signed [32:0] add_temp_8; // sfix33_En30
  wire signed [31:0] sum10; // sfix32_En30
  wire signed [31:0] add_signext_18; // sfix32_En30
  wire signed [31:0] add_signext_19; // sfix32_En30
  wire signed [32:0] add_temp_9; // sfix33_En30
  wire signed [31:0] sum11; // sfix32_En30
  wire signed [31:0] add_signext_20; // sfix32_En30
  wire signed [31:0] add_signext_21; // sfix32_En30
  wire signed [32:0] add_temp_10; // sfix33_En30
  wire signed [31:0] sum12; // sfix32_En30
  wire signed [31:0] add_signext_22; // sfix32_En30
  wire signed [31:0] add_signext_23; // sfix32_En30
  wire signed [32:0] add_temp_11; // sfix33_En30
  wire signed [31:0] sum13; // sfix32_En30
  wire signed [31:0] add_signext_24; // sfix32_En30
  wire signed [31:0] add_signext_25; // sfix32_En30
  wire signed [32:0] add_temp_12; // sfix33_En30
  wire signed [31:0] sum14; // sfix32_En30
  wire signed [31:0] add_signext_26; // sfix32_En30
  wire signed [31:0] add_signext_27; // sfix32_En30
  wire signed [32:0] add_temp_13; // sfix33_En30
  wire signed [31:0] sum15; // sfix32_En30
  wire signed [31:0] add_signext_28; // sfix32_En30
  wire signed [31:0] add_signext_29; // sfix32_En30
  wire signed [32:0] add_temp_14; // sfix33_En30
  wire signed [31:0] sum16; // sfix32_En30
  wire signed [31:0] add_signext_30; // sfix32_En30
  wire signed [31:0] add_signext_31; // sfix32_En30
  wire signed [32:0] add_temp_15; // sfix33_En30
  wire signed [31:0] sum17; // sfix32_En30
  wire signed [31:0] add_signext_32; // sfix32_En30
  wire signed [31:0] add_signext_33; // sfix32_En30
  wire signed [32:0] add_temp_16; // sfix33_En30
  wire signed [31:0] sum18; // sfix32_En30
  wire signed [31:0] add_signext_34; // sfix32_En30
  wire signed [31:0] add_signext_35; // sfix32_En30
  wire signed [32:0] add_temp_17; // sfix33_En30
  wire signed [31:0] sum19; // sfix32_En30
  wire signed [31:0] add_signext_36; // sfix32_En30
  wire signed [31:0] add_signext_37; // sfix32_En30
  wire signed [32:0] add_temp_18; // sfix33_En30
  wire signed [31:0] sum20; // sfix32_En30
  wire signed [31:0] add_signext_38; // sfix32_En30
  wire signed [31:0] add_signext_39; // sfix32_En30
  wire signed [32:0] add_temp_19; // sfix33_En30
  wire signed [31:0] sum21; // sfix32_En30
  wire signed [31:0] add_signext_40; // sfix32_En30
  wire signed [31:0] add_signext_41; // sfix32_En30
  wire signed [32:0] add_temp_20; // sfix33_En30
  wire signed [31:0] sum22; // sfix32_En30
  wire signed [31:0] add_signext_42; // sfix32_En30
  wire signed [31:0] add_signext_43; // sfix32_En30
  wire signed [32:0] add_temp_21; // sfix33_En30
  wire signed [31:0] sum23; // sfix32_En30
  wire signed [31:0] add_signext_44; // sfix32_En30
  wire signed [31:0] add_signext_45; // sfix32_En30
  wire signed [32:0] add_temp_22; // sfix33_En30
  wire signed [31:0] sum24; // sfix32_En30
  wire signed [31:0] add_signext_46; // sfix32_En30
  wire signed [31:0] add_signext_47; // sfix32_En30
  wire signed [32:0] add_temp_23; // sfix33_En30
  wire signed [31:0] sum25; // sfix32_En30
  wire signed [31:0] add_signext_48; // sfix32_En30
  wire signed [31:0] add_signext_49; // sfix32_En30
  wire signed [32:0] add_temp_24; // sfix33_En30
  wire signed [31:0] sum26; // sfix32_En30
  wire signed [31:0] add_signext_50; // sfix32_En30
  wire signed [31:0] add_signext_51; // sfix32_En30
  wire signed [32:0] add_temp_25; // sfix33_En30
  wire signed [31:0] sum27; // sfix32_En30
  wire signed [31:0] add_signext_52; // sfix32_En30
  wire signed [31:0] add_signext_53; // sfix32_En30
  wire signed [32:0] add_temp_26; // sfix33_En30
  wire signed [31:0] sum28; // sfix32_En30
  wire signed [31:0] add_signext_54; // sfix32_En30
  wire signed [31:0] add_signext_55; // sfix32_En30
  wire signed [32:0] add_temp_27; // sfix33_En30
  wire signed [31:0] sum29; // sfix32_En30
  wire signed [31:0] add_signext_56; // sfix32_En30
  wire signed [31:0] add_signext_57; // sfix32_En30
  wire signed [32:0] add_temp_28; // sfix33_En30
  wire signed [31:0] sum30; // sfix32_En30
  wire signed [31:0] add_signext_58; // sfix32_En30
  wire signed [31:0] add_signext_59; // sfix32_En30
  wire signed [32:0] add_temp_29; // sfix33_En30
  reg  signed [31:0] output_register; // sfix32_En30

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[30] * coeff31;
  assign product31 = mul_temp[26:0];

  assign mul_temp_1 = delay_pipeline[29] * coeff30;
  assign product30 = mul_temp_1[26:0];

  assign mul_temp_2 = delay_pipeline[28] * coeff29;
  assign product29 = mul_temp_2[26:0];

  assign mul_temp_3 = delay_pipeline[27] * coeff28;
  assign product28 = mul_temp_3[26:0];

  assign mul_temp_4 = delay_pipeline[26] * coeff27;
  assign product27 = mul_temp_4[26:0];

  assign mul_temp_5 = delay_pipeline[25] * coeff26;
  assign product26 = mul_temp_5[26:0];

  assign mul_temp_6 = delay_pipeline[24] * coeff25;
  assign product25 = mul_temp_6[26:0];

  assign mul_temp_7 = delay_pipeline[23] * coeff24;
  assign product24 = mul_temp_7[26:0];

  assign mul_temp_8 = delay_pipeline[22] * coeff23;
  assign product23 = mul_temp_8[26:0];

  assign mul_temp_9 = delay_pipeline[21] * coeff22;
  assign product22 = mul_temp_9[26:0];

  assign mul_temp_10 = delay_pipeline[20] * coeff21;
  assign product21 = mul_temp_10[26:0];

  assign mul_temp_11 = delay_pipeline[19] * coeff20;
  assign product20 = mul_temp_11[26:0];

  assign mul_temp_12 = delay_pipeline[18] * coeff19;
  assign product19 = mul_temp_12[26:0];

  assign mul_temp_13 = delay_pipeline[17] * coeff18;
  assign product18 = mul_temp_13[26:0];

  assign mul_temp_14 = delay_pipeline[16] * coeff17;
  assign product17 = mul_temp_14[26:0];

  assign mul_temp_15 = delay_pipeline[15] * coeff16;
  assign product16 = mul_temp_15[26:0];

  assign mul_temp_16 = delay_pipeline[14] * coeff15;
  assign product15 = mul_temp_16[26:0];

  assign mul_temp_17 = delay_pipeline[13] * coeff14;
  assign product14 = mul_temp_17[26:0];

  assign mul_temp_18 = delay_pipeline[12] * coeff13;
  assign product13 = mul_temp_18[26:0];

  assign mul_temp_19 = delay_pipeline[11] * coeff12;
  assign product12 = mul_temp_19[26:0];

  assign mul_temp_20 = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp_20[26:0];

  assign mul_temp_21 = delay_pipeline[9] * coeff10;
  assign product10 = mul_temp_21[26:0];

  assign mul_temp_22 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_22[26:0];

  assign mul_temp_23 = delay_pipeline[7] * coeff8;
  assign product8 = mul_temp_23[26:0];

  assign mul_temp_24 = delay_pipeline[6] * coeff7;
  assign product7 = mul_temp_24[26:0];

  assign mul_temp_25 = delay_pipeline[5] * coeff6;
  assign product6 = mul_temp_25[26:0];

  assign mul_temp_26 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_26[26:0];

  assign mul_temp_27 = delay_pipeline[3] * coeff4;
  assign product4 = mul_temp_27[26:0];

  assign mul_temp_28 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_28[26:0];

  assign mul_temp_29 = delay_pipeline[1] * coeff2;
  assign product2 = mul_temp_29[26:0];

  assign product1_cast = $signed({{5{product1[26]}}, product1});

  assign mul_temp_30 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_30[26:0];

  assign add_signext = product1_cast;
  assign add_signext_1 = $signed({{5{product2[26]}}, product2});
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[31:0];

  assign add_signext_2 = sum1;
  assign add_signext_3 = $signed({{5{product3[26]}}, product3});
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[31:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = $signed({{5{product4[26]}}, product4});
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[31:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = $signed({{5{product5[26]}}, product5});
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[31:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = $signed({{5{product6[26]}}, product6});
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[31:0];

  assign add_signext_10 = sum5;
  assign add_signext_11 = $signed({{5{product7[26]}}, product7});
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[31:0];

  assign add_signext_12 = sum6;
  assign add_signext_13 = $signed({{5{product8[26]}}, product8});
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[31:0];

  assign add_signext_14 = sum7;
  assign add_signext_15 = $signed({{5{product9[26]}}, product9});
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[31:0];

  assign add_signext_16 = sum8;
  assign add_signext_17 = $signed({{5{product10[26]}}, product10});
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum9 = add_temp_8[31:0];

  assign add_signext_18 = sum9;
  assign add_signext_19 = $signed({{5{product11[26]}}, product11});
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum10 = add_temp_9[31:0];

  assign add_signext_20 = sum10;
  assign add_signext_21 = $signed({{5{product12[26]}}, product12});
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum11 = add_temp_10[31:0];

  assign add_signext_22 = sum11;
  assign add_signext_23 = $signed({{5{product13[26]}}, product13});
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum12 = add_temp_11[31:0];

  assign add_signext_24 = sum12;
  assign add_signext_25 = $signed({{5{product14[26]}}, product14});
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum13 = add_temp_12[31:0];

  assign add_signext_26 = sum13;
  assign add_signext_27 = $signed({{5{product15[26]}}, product15});
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum14 = add_temp_13[31:0];

  assign add_signext_28 = sum14;
  assign add_signext_29 = $signed({{5{product16[26]}}, product16});
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum15 = add_temp_14[31:0];

  assign add_signext_30 = sum15;
  assign add_signext_31 = $signed({{5{product17[26]}}, product17});
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum16 = add_temp_15[31:0];

  assign add_signext_32 = sum16;
  assign add_signext_33 = $signed({{5{product18[26]}}, product18});
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum17 = add_temp_16[31:0];

  assign add_signext_34 = sum17;
  assign add_signext_35 = $signed({{5{product19[26]}}, product19});
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum18 = add_temp_17[31:0];

  assign add_signext_36 = sum18;
  assign add_signext_37 = $signed({{5{product20[26]}}, product20});
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum19 = add_temp_18[31:0];

  assign add_signext_38 = sum19;
  assign add_signext_39 = $signed({{5{product21[26]}}, product21});
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum20 = add_temp_19[31:0];

  assign add_signext_40 = sum20;
  assign add_signext_41 = $signed({{5{product22[26]}}, product22});
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum21 = add_temp_20[31:0];

  assign add_signext_42 = sum21;
  assign add_signext_43 = $signed({{5{product23[26]}}, product23});
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum22 = add_temp_21[31:0];

  assign add_signext_44 = sum22;
  assign add_signext_45 = $signed({{5{product24[26]}}, product24});
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum23 = add_temp_22[31:0];

  assign add_signext_46 = sum23;
  assign add_signext_47 = $signed({{5{product25[26]}}, product25});
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum24 = add_temp_23[31:0];

  assign add_signext_48 = sum24;
  assign add_signext_49 = $signed({{5{product26[26]}}, product26});
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum25 = add_temp_24[31:0];

  assign add_signext_50 = sum25;
  assign add_signext_51 = $signed({{5{product27[26]}}, product27});
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum26 = add_temp_25[31:0];

  assign add_signext_52 = sum26;
  assign add_signext_53 = $signed({{5{product28[26]}}, product28});
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum27 = add_temp_26[31:0];

  assign add_signext_54 = sum27;
  assign add_signext_55 = $signed({{5{product29[26]}}, product29});
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum28 = add_temp_27[31:0];

  assign add_signext_56 = sum28;
  assign add_signext_57 = $signed({{5{product30[26]}}, product30});
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum29 = add_temp_28[31:0];

  assign add_signext_58 = sum29;
  assign add_signext_59 = $signed({{5{product31[26]}}, product31});
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum30 = add_temp_29[31:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum30;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter_3k4
